{"version":3,"sources":["components/TimeSettingsModal.js","components/WritableClock.js","sound/beep.mp3","sound/bell.mp3","components/Timer.js","slices/notiSlice.js","components/GeneralSettingsModal.js","App.js","app/store.js","index.js"],"names":["TimeSettingsModal","props","useState","type","timerMin","setTimerMin","breakMin","setBreakMin","useEffect","isOpen","document","addEventListener","keydownEvents","removeEventListener","evt","code","saveSettings","preventDefault","timeObj","timerTime","Number","parseInt","breakTime","save","close","className","id","closeTimeoutMS","onRequestClose","onSubmit","step","min","max","value","onChange","target","WritableClock","minWriteFlag","setMinWriteFlag","secWriteFlag","setSecWriteFlag","setMin","sec","setSec","tmp","setTmp","startWriting","pause","applyChange","oldT","newT","isNaN","alert","console","log","changedTime","update","Math","floor","time","toString","padStart","elem","getElementById","focus","onBlur","onDoubleClick","Modal","setAppElement","Timer","initTime","useRef","settings","initBreak","alarmVol","volume","autoStart","curTime","setCurTime","didStart","setDidStart","onBreak","setBreak","modalOpen","setModalOpen","key","setKey","onNoti","useSelector","state","notification","useLayoutEffect","current","ctrlKey","reset","doPause","sendNotification","breakStart","title","body","Notification","applyTimeSettings","cachedTimeObj","JSON","parse","localStorage","getItem","Object","assign","shortTT","shortBT","longTT","longBT","update_initTime","initTimeObj","window","setItem","stringify","refreshInterval","setInterval","audio","Audio","BEEP","BELL","playCnt","a","Promise","r","setTimeout","this","currentTime","play","beep","clearInterval","updateFromClock","onClick","checked","notiSlice","createSlice","name","initialState","reducers","turnOn","turnOff","actions","GeneralSettingsModal","curSettings","vol","setVol","setAutoStart","dispatch","useDispatch","settingsObj","parseFloat","permission","requestPermission","then","App","toggleSecond","setToggleSecond","INIT_TIME","setInitTimeObj","generalCache","setSettingsObj","timeCache","genSettingsObj","clear","location","reload","num","store","configureStore","reducer","notiReducer","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.91c6b279.chunk.js","sourcesContent":["import React, {useState, useEffect, useRef} from 'react';\r\nimport '../styles/SettingsModal.css';\r\nimport Modal from 'react-modal';\r\n\r\nModal.setAppElement('#root');\r\n\r\nexport default function TimeSettingsModal(props) {\r\n    const MINUTE = 60;\r\n    const [timerMin, setTimerMin] = useState(props.type === \"SHORT\" ? 25 : 50);\r\n    const [breakMin, setBreakMin] = useState(props.type === \"SHORT\" ? 5 : 10);\r\n\r\n    // set keyboard keydown\r\n    useEffect(() => {\r\n        if(!props.isOpen) return; // disable keydown when closed\r\n\r\n        document.addEventListener('keydown', keydownEvents);\r\n        return ()=>document.removeEventListener('keydown', keydownEvents);\r\n    }, [props.isOpen]);\r\n    \r\n    const keydownEvents = (evt)=>{\r\n        if(props.isOpen && (evt.code === 'Space' || evt.code === 'Enter')) // only when the modal is opened\r\n            saveSettings();\r\n    };\r\n\r\n\r\n    function saveSettings(evt){\r\n        if(evt) evt.preventDefault();\r\n\r\n        const timeObj = {\r\n            timerTime: Number.parseInt(timerMin) * MINUTE,\r\n            breakTime: Number.parseInt(breakMin) * MINUTE\r\n        }\r\n        props.save(timeObj);\r\n        props.close();\r\n    }\r\n\r\n    return (\r\n        <Modal \r\n            className=\"modal\" \r\n            id=\"time\"\r\n            closeTimeoutMS={200}\r\n            isOpen={props.isOpen} \r\n            onRequestClose={props.close}>\r\n            <div className=\"modal\" id=\"time\" >\r\n                <div className=\"modal-body\">  \r\n                    <form onSubmit={saveSettings}>\r\n                        <div className=\"settings\">\r\n                            <div className=\"settings-container-time\">\r\n                                <label>\r\n                                    Timer &nbsp;\r\n                                    <input className=\"time\" type=\"number\" step=\"5\" min=\"0\" max=\"99\" \r\n                                            value={timerMin} \r\n                                            onChange={(evt)=>{setTimerMin(evt.target.value);}}/>\r\n                                </label>\r\n\r\n                                <label>\r\n                                    Break &nbsp;\r\n                                    <input className=\"time\" type=\"number\" step=\"1\" min=\"0\" max=\"99\" \r\n                                            value={breakMin} \r\n                                            onChange={(evt)=>{setBreakMin(evt.target.value);}}/>\r\n                                </label>\r\n                            </div>\r\n                        </div>\r\n                        <input className=\"settings-save\" type=\"submit\" value=\"Submit\" />\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </Modal>\r\n    )\r\n}","import React, {useState, useEffect} from 'react';\r\nimport '../styles/Timer.css';\r\n\r\nexport default function WritableClock(props) {\r\n    const [minWriteFlag, setMinWriteFlag] = useState(false);\r\n    const [secWriteFlag, setSecWriteFlag] = useState(false);\r\n    const [min, setMin] = useState(\"00\");\r\n    const [sec, setSec] = useState(\"00\");\r\n    const [tmp, setTmp] = useState(\"\");\r\n\r\n    const MIN = 0, SEC = 1, MINIUTE = 60;\r\n\r\n    // Init time with props.time\r\n    useEffect(()=>{\r\n        //console.log(`WritableClock is rendering : ${props.time}`);\r\n        let min = Math.floor(props.time/MINIUTE); min = min.toString().padStart(2, '0');\r\n        let sec = props.time%MINIUTE; sec = sec.toString().padStart(2, '0');\r\n        setMin(min); setSec(sec);\r\n    }, []);\r\n\r\n\r\n    // =============================================================================\r\n    function startWriting(target){\r\n        setTmp(target === MIN ? min : sec); \r\n        target === MIN ? setMinWriteFlag(true) : setSecWriteFlag(true);\r\n        props.pause();\r\n    }\r\n\r\n    // Focus when startWriting\r\n    useEffect(()=>{\r\n        let elem = document.getElementById(\"minWrite\")\r\n        if(elem) elem.focus();\r\n    }, [minWriteFlag]);\r\n    useEffect(()=>{\r\n        let elem = document.getElementById(\"secWrite\")\r\n        if(elem) elem.focus();\r\n    }, [secWriteFlag]);\r\n\r\n\r\n    // =============================================================================\r\n    // Update valid time change\r\n    function applyChange(target){\r\n        const type = (target===MIN ? \"Minute\" : \"Second\");\r\n        let oldT = parseInt(target===MIN ? min : sec);\r\n        let newT = parseInt(tmp);\r\n        if(isNaN(newT)){\r\n            alert(`${type} must be a number between 0 to ${target===MIN ? 99 : 59}`);\r\n        }\r\n        if((0 <= newT && newT < (target === MIN ? 100 : 60)) && oldT !== newT){\r\n            console.log(`Changing ${type} from ${oldT} to ${newT}`); // DEBUG            \r\n            const changedTime = target === MIN ? newT*MINIUTE + parseInt(sec) : parseInt(min)*MINIUTE + newT;            \r\n            props.update(changedTime);\r\n        } \r\n\r\n        target === MIN ? setMinWriteFlag(false) : setSecWriteFlag(false);\r\n    }\r\n\r\n    \r\n    return (\r\n        <div id=\"timer\">\r\n            {\r\n                minWriteFlag\r\n                ? <input className=\"write\" id=\"minWrite\" type=\"text\" value={tmp} onChange={(evt)=>{setTmp(evt.target.value)}} onBlur={()=>{applyChange(MIN)}}/>\r\n                : <span className=\"show\" onDoubleClick = {()=>{startWriting(MIN)}}>{min}</span>\r\n            } \r\n            :\r\n            {\r\n                secWriteFlag\r\n                ? <input className=\"write\" id=\"secWrite\" type=\"text\" value={tmp} onChange={(evt)=>{setTmp(evt.target.value)}} onBlur={()=>{applyChange(SEC)}}/>\r\n                : <span className=\"show\" onDoubleClick = {()=>{startWriting(SEC)}}>{sec}</span>\r\n            } \r\n        </div>\r\n    )\r\n}\r\n","export default __webpack_public_path__ + \"static/media/beep.3078eb82.mp3\";","export default __webpack_public_path__ + \"static/media/bell.b1616f76.mp3\";","import React, {useState, useEffect, useRef, useLayoutEffect} from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport '../styles/Timer.css';\r\n\r\nimport TimeSettingsModal from './TimeSettingsModal.js';\r\nimport WritableClock from './WritableClock';\r\n\r\nimport BEEP from '../sound/beep.mp3'\r\nimport BELL from '../sound/bell.mp3'\r\n\r\nconst MINUTE = 60;\r\n\r\nfunction Timer(props) {\r\n    // Options - preserve with useRef \r\n    let initTime = useRef(props.settings.timerTime); // 초기값 props.settingsObj.timerTime\r\n    let initBreak = useRef(props.settings.breakTime); // 초기값 props.settingsObj.breakTime\r\n    let alarmVol = useRef(props.settings.volume); // 초기값 props.settingsObj.volume\r\n    let autoStart = useRef(props.settings.autoStart); // 초기값 props.settingsObj.autoStart\r\n\r\n    // States for timer\r\n    const [curTime, setCurTime] = useState(-1); // -1 for starting a new timer / else resume paused timer\r\n    const [didStart, setDidStart] = useState(false);\r\n    const [onBreak, setBreak] = useState(false);\r\n\r\n    // Etc\r\n    const [modalOpen, setModalOpen] = useState(false);\r\n    const [key, setKey] = useState(0); // to re-render child component writableClock.js\r\n\r\n    // Redux\r\n    const onNoti = useSelector(state => state.notification.onNoti);\r\n\r\n\r\n    //======================================================\r\n    // init clock\r\n    useLayoutEffect(()=>{\r\n        setCurTime(onBreak ? initBreak.current : initTime.current); // starting a new timer\r\n    }, []);\r\n    \r\n    // init - set keyboard keydown\r\n    useLayoutEffect(()=>{\r\n        document.addEventListener('keydown', keydownEvents);\r\n        return ()=>document.removeEventListener('keydown', keydownEvents);\r\n    });\r\n\r\n    const keydownEvents = (evt)=>{\r\n        if(evt.code === 'Space')\r\n            setDidStart(didStart => !didStart);\r\n        else if (evt.code === 'KeyR'){\r\n            if(evt.ctrlKey){\r\n                evt.preventDefault(); // remove 'Ctrl+R' reload page\r\n                setBreak(false);\r\n            }\r\n            else\r\n                reset();\r\n        }\r\n    };\r\n\r\n\r\n    // =============================================================================\r\n    // Update clock\r\n    useEffect(() => {\r\n        setKey(key => key + 1); // re-render writableClock\r\n    }, [curTime]);  \r\n\r\n    // countDown\r\n    useEffect(() => {\r\n        if(didStart){\r\n            var refreshInterval = setInterval(() => {\r\n                if(curTime === 0) {\r\n                    beep();\r\n                    setBreak(onBreak => !onBreak); // toggle break status\r\n                    //reset();\r\n                    // restart taken care of by useEffect[onBreak]\r\n                    return;\r\n                }\r\n                setCurTime(curTime => curTime-1);        \r\n            }, 1000);\r\n        }\r\n        return () => clearInterval(refreshInterval);\r\n    }, [didStart, curTime]);\r\n\r\n    // onBreak - Break start or timer restart\r\n    useEffect(() => {\r\n        reset();\r\n\r\n        if(curTime != 0) return; // not the moment of timer end\r\n\r\n        // Break start\r\n        if(onBreak){\r\n            setDidStart(true); // start break\r\n            sendNotification(true);\r\n        }\r\n        // Break over\r\n        else if (autoStart.current) {\r\n            setDidStart(true); // option : autostart (Inf Loop? Stack?)\r\n            sendNotification(false);\r\n        }\r\n    }, [onBreak]);\r\n\r\n\r\n    // =============================================================================\r\n    function reset(doPause = false){\r\n        console.log(doPause ? \"Pausing\" : \"Resetting\");\r\n        setDidStart(false);\r\n    \r\n        // resetting, not pause\r\n        if(!doPause) {\r\n            setCurTime(onBreak ? initBreak.current : initTime.current); \r\n        }\r\n    }\r\n\r\n    function beep() {\r\n        let audio = new Audio(props.type === 'SHORT' ? BEEP : BELL);   \r\n\r\n        audio.volume = alarmVol.current; // option\r\n\r\n        let playCnt = 1;\r\n        audio.addEventListener('ended', async function() {\r\n            playCnt++;\r\n            if(playCnt >= 1) return;\r\n            \r\n            await new Promise(r => setTimeout(r, 300)); // sleep\r\n            \r\n            this.currentTime = 0;\r\n            this.play();\r\n        }, false);\r\n        audio.play(); \r\n    }\r\n\r\n    function toggleBreak(){\r\n        setBreak(onBreak=>!onBreak);\r\n        reset();\r\n    }\r\n\r\n    function sendNotification(breakStart = true){\r\n        console.log(\"Noti : \", onNoti);\r\n        if(!onNoti) return;\r\n        \r\n        const type = `${props.type === \"SHORT\" ? \"Short\" : \"Long\"}`;\r\n        const title = type + \" timer\" + `${breakStart ? \" over!\" : \" start!\"}`;\r\n        const body = `${breakStart ? \"Break time \" + initBreak.current / MINUTE  : \"Focus for another \" + initTime.current / MINUTE}` + \" minutes\"\r\n\r\n        new Notification(title, {\r\n            body: body\r\n        });\r\n    }\r\n\r\n\r\n    // =============================================================================\r\n    // apply new settings from 'SettingsModal'\r\n    function applyTimeSettings(timeObj){\r\n        initTime.current = timeObj.timerTime;\r\n        initBreak.current = timeObj.breakTime;\r\n        reset();\r\n        //setCurTime(onBreak ? initBreak.current : initTime.current); // debug\r\n        \r\n        // Update initTime and cache\r\n        const key = 'initTimeSettings-json';\r\n        let cachedTimeObj = JSON.parse(localStorage.getItem(key));\r\n        if(props.type === \"SHORT\"){\r\n            cachedTimeObj = Object.assign({}, cachedTimeObj, {\r\n                shortTT : timeObj.timerTime,\r\n                shortBT : timeObj.breakTime\r\n            });\r\n        }\r\n        else{\r\n            cachedTimeObj = Object.assign({}, cachedTimeObj, {\r\n                longTT : timeObj.timerTime,\r\n                longBT : timeObj.breakTime\r\n            });\r\n        }\r\n        props.update_initTime(initTimeObj => Object.assign({}, initTimeObj, cachedTimeObj)); // also update 'initTimeObj' state in App.js\r\n        window.localStorage.setItem(key, JSON.stringify(cachedTimeObj)); // cache time settings\r\n    }\r\n\r\n    // Apply updates from writableClock (initTime setting and localStorage cache)\r\n    // Can only update timerTime or breakTime at a time (depends on 'onBreak' flag)\r\n    function updateFromClock(time){\r\n        let timeObj = {\r\n            timerTime : initTime.current,\r\n            breakTime : initBreak.current\r\n        }\r\n        if(onBreak){\r\n            Object.assign(timeObj, {breakTime : time});\r\n        }\r\n        else{\r\n            Object.assign(timeObj, {timerTime : time});\r\n        }\r\n\r\n        applyTimeSettings(timeObj);\r\n    }\r\n\r\n\r\n    return (\r\n        <div className = \"timerNswitch\">\r\n            <div className = \"timerBox\">\r\n                <span id = \"breakNotify\">{onBreak ? \"(on Break)\" : \" \"}</span>\r\n                <br/>\r\n                <p>\r\n                    <WritableClock\r\n                        key={key}\r\n                        time={curTime}   \r\n                        pause={()=>reset(true)} // pause\r\n                        update={(time)=>updateFromClock(time)}\r\n                    ></WritableClock>\r\n                </p>\r\n                <br/>\r\n                <div className = \"buttonSet\">\r\n                    <button className = \"button\" id=\"start\" onClick = {()=>setDidStart(true)}> Start </button>\r\n                    <button className = \"button\" id=\"pause\" onClick = {()=>reset(true)}> Pause </button>\r\n                    <button className = \"button secondary\" id=\"reset\" onClick = {()=>reset()}> Reset </button>\r\n                    <button className = \"button secondary\" id=\"timeSettings\" data-modal-target = \"SHORT\" onClick = {()=>setModalOpen(true)}> Time </button>\r\n                </div>\r\n            </div>\r\n\r\n            <label className=\"switch\">\r\n                <input type=\"checkbox\" onChange={()=>toggleBreak()} checked={onBreak}></input>\r\n                <span className=\"slider round\"></span>\r\n            </label>\r\n\r\n            <TimeSettingsModal \r\n                type={props.type}\r\n                isOpen={modalOpen} \r\n                close={()=>setModalOpen(false)} \r\n                save={(timeObj)=>applyTimeSettings(timeObj)}>\r\n            </TimeSettingsModal>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Timer;","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst initialState = {\r\n    onNoti: false\r\n}\r\n\r\nexport const notiSlice = createSlice({\r\n    name: 'noti',\r\n    initialState,\r\n    // The `reducers` field lets us define reducers and generate associated actions\r\n    reducers: {\r\n        turnOn: (state) => {\r\n            state.onNoti = true;\r\n        },\r\n        turnOff: (state) => {\r\n            state.onNoti = false;\r\n        }\r\n    }\r\n});\r\n\r\nexport const { turnOn, turnOff } = notiSlice.actions;\r\n\r\nexport default notiSlice.reducer;","import React, {useState, useEffect, useRef} from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { turnOn, turnOff } from '../slices/notiSlice';\r\nimport '../styles/SettingsModal.css';\r\nimport Modal from 'react-modal';\r\n\r\nModal.setAppElement('#root');\r\n\r\nexport default function GeneralSettingsModal(props) {\r\n    const [vol, setVol] = useState(props.curSettings.volume);\r\n    const [autoStart, setAutoStart] = useState(props.curSettings.autoStart);\r\n    \r\n    // Redux\r\n    const onNoti = useSelector(state => state.notification.onNoti);\r\n    const dispatch = useDispatch();\r\n\r\n    // set keyboard keydown\r\n    useEffect(() => {\r\n        if(!props.isOpen) return; // disable keydown when closed\r\n\r\n        document.addEventListener('keydown', keydownEvents);\r\n        return ()=>document.removeEventListener('keydown', keydownEvents);\r\n    }, [props.isOpen]);\r\n    \r\n    const keydownEvents = (evt)=>{\r\n        if(props.isOpen && (evt.code === 'Space' || evt.code === 'Enter')){ // only when the modal is opened\r\n            evt.preventDefault();\r\n            saveSettings();\r\n        }\r\n    };\r\n\r\n    function saveSettings(evt=null){\r\n        if(evt) evt.preventDefault();\r\n\r\n        alert(\"Settings saved\");\r\n        const settingsObj = {\r\n            volume: Number.parseFloat(vol),\r\n            autoStart: autoStart,\r\n        }\r\n        props.save(settingsObj);\r\n        props.close();\r\n    }\r\n\r\n    function checkPermission(){\r\n        console.log(Notification.permission, onNoti);\r\n\r\n        // Check off - Turn off notification\r\n        if(onNoti){\r\n            dispatch(turnOff());\r\n        }\r\n        // Check on - Turn on the notification, ask for permission if not granted yet \r\n        else{\r\n            if(Notification.permission !== \"granted\"){\r\n                Notification.requestPermission().then(permission => {\r\n                    if(permission === \"granted\"){\r\n                        console.log(\"Permission granted\");\r\n                        dispatch(turnOn());\r\n                    }\r\n                    else console.log(\"Permission denied\");\r\n                })\r\n            }\r\n            else{\r\n                dispatch(turnOn());\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Modal \r\n            className=\"modal\" \r\n            id=\"general\"\r\n            closeTimeoutMS={200}\r\n            isOpen={props.isOpen} \r\n            onRequestClose={props.close}>\r\n            <div className=\"modal\" id=\"general\" >\r\n                <div className=\"modal-header\">\r\n                    <span className=\"title\">General Settings</span>\r\n                    <button className=\"close-button\" onClick={props.close}> &times; </button>\r\n                </div>\r\n\r\n                <div className=\"modal-body\">  \r\n                    <form onSubmit={saveSettings}>\r\n                        <div className=\"settings\">\r\n                            <div className=\"settings-container-checkbox\">\r\n                                <label>\r\n                                    <input type=\"checkbox\" \r\n                                        checked={autoStart} \r\n                                        onChange={()=>{setAutoStart(autoStart=>!autoStart);}}>\r\n                                    </input> Auto start timers and breaks?\r\n                                </label>\r\n                                <label>\r\n                                    <input type=\"checkbox\" \r\n                                        checked={onNoti} \r\n                                        onChange={()=>{checkPermission()}}>\r\n                                    </input> Send notification when the timer is over\r\n                                </label>\r\n                            </div>\r\n                            \r\n                            <br/>\r\n\r\n                            <div className=\"settings-container-slider\">\r\n                                Select alarm volume\r\n                                <input className=\"slide\" id=\"volume\" type=\"range\" min=\"0\" max=\"1\" step=\"0.01\" \r\n                                value={vol}\r\n                                onChange={(evt)=>{setVol(evt.target.value);}}></input>\r\n                            </div>\r\n                        </div>\r\n                        <input className=\"settings-save\" type=\"submit\" value=\"Submit\" />\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </Modal>\r\n    )\r\n}","import React, {useState, useEffect} from 'react';\r\nimport './styles/App.css';\r\nimport Timer from './components/Timer';\r\nimport GeneralSettingsModal from './components/GeneralSettingsModal.js';\r\n\r\nfunction App(props) {\r\n  const [toggleSecond, setToggleSecond] = useState(false);\r\n  const [modalOpen, setModalOpen] = useState(false);\r\n\r\n  // Default initTime\r\n  const MINIUTE = 60;\r\n  const INIT_TIME = {\r\n    shortTT : 25 * MINIUTE,\r\n    shortBT: 5 * MINIUTE,\r\n    longTT : 50 * MINIUTE,\r\n    longBT: 10 * MINIUTE,\r\n  }; // TT : Timer Time, BT : Break Time\r\n  const [initTimeObj, setInitTimeObj] = useState(INIT_TIME); // stores initial time settings for both timers\r\n\r\n\r\n  // =============================================================================\r\n  // [Cache] Retrieve saved settings from localStorage\r\n  useEffect(()=>{\r\n    //localStorage.clear();\r\n    let generalCache = localStorage.getItem('generalSettings-json')\r\n    if (generalCache){\r\n      setSettingsObj(JSON.parse(generalCache));\r\n    }\r\n\r\n    let timeCache = localStorage.getItem('initTimeSettings-json')\r\n    if (timeCache){\r\n      setInitTimeObj(initTimeObj => Object.assign({}, initTimeObj, JSON.parse(timeCache)));\r\n    }\r\n  }, []);\r\n\r\n\r\n  // =============================================================================\r\n  // General settings - for both timers : volume, autostart, ...\r\n  const [genSettingsObj, setSettingsObj] = useState({\r\n    volume: 1,\r\n    autoStart: false,\r\n    onNoti: false\r\n  });\r\n  const [key, setKey] = useState(0);\r\n\r\n  useEffect(()=>{\r\n    setKey(key=>key+1); // re-render Timer components by changing the key\r\n    localStorage.setItem('generalSettings-json', JSON.stringify(genSettingsObj)); // cache general settings\r\n  }, [genSettingsObj]);\r\n\r\n  // Called when general settings modal closes\r\n  function applySettings(settingsObj){\r\n    //console.log(\"--Applying general settings - expecting re-rendering--\")\r\n    setSettingsObj(settingsObj)\r\n  }\r\n\r\n\r\n  // =============================================================================\r\n  // Reset\r\n  function resetAllSettings(){\r\n    localStorage.clear(); \r\n    alert(\"Cleared!\");\r\n    document.location.reload(); // reload webpage\r\n  }\r\n\r\n\r\n  return (\r\n    <>\r\n      <div className=\"header\">\r\n        <span className=\"title\">Pomodoro Timer Plus+</span>\r\n        <div className=\"main-buttonSet\">\r\n          <button onClick = {()=>setToggleSecond(!toggleSecond)}>Long-Timer</button>\r\n          <button onClick = {()=>setModalOpen(true)}>Settings</button>\r\n          <button onClick = {()=>resetAllSettings()}>Reset Settings</button>\r\n        </div>\r\n\r\n      </div>\r\n      <div className = \"wrapper\">\r\n        <Timer \r\n          key = {key}\r\n          type = \"SHORT\" \r\n          settings = {Object.assign({}, genSettingsObj, \r\n                                        {timerTime:initTimeObj.shortTT, breakTime:initTimeObj.shortBT})}\r\n          update_initTime = {setInitTimeObj}\r\n        >\r\n        </Timer>\r\n        {toggleSecond ?\r\n          <Timer \r\n            key = {key + 2} // if set to key + 1, React confuses short timer with long timer whenever key is incremented\r\n            type = \"LONG\" \r\n            settings = {Object.assign({}, genSettingsObj, \r\n                                          {timerTime:initTimeObj.longTT, breakTime:initTimeObj.longBT})}\r\n            update_initTime = {setInitTimeObj}\r\n          >\r\n          </Timer>\r\n          : null\r\n        }\r\n      </div>\r\n\r\n      <GeneralSettingsModal\r\n        key = {key + 3}\r\n        curSettings={genSettingsObj}\r\n        id=\"modalTest\"\r\n        isOpen={modalOpen} \r\n        close={()=>setModalOpen(false)} \r\n        save={(num)=>applySettings(num)}\r\n      >\r\n      </GeneralSettingsModal>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;","import { configureStore } from '@reduxjs/toolkit';\r\nimport notiReducer from '../slices/notiSlice';\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    notification: notiReducer,\r\n  },\r\n  // 이름 중요? notification:\r\n});\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nimport { store } from './app/store';\r\nimport { Provider } from 'react-redux';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}