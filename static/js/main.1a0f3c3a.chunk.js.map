{"version":3,"sources":["components/TimeSettingsModal.js","sound/beep.mp3","sound/bell.mp3","components/Timer.js","components/GeneralSettingsModal.js","components/WritableClock.js","components/App.js","index.js"],"names":["TimeSettingsModal","props","useState","timerMin","setTimerMin","breakMin","setBreakMin","useEffect","document","addEventListener","keydownEvents","removeEventListener","isOpen","evt","code","saveSettings","preventDefault","timeObj","timerTime","Number","parseInt","breakTime","save","close","className","id","closeTimeoutMS","onRequestClose","onSubmit","type","step","min","max","value","onChange","target","Modal","setAppElement","Timer","initTime","useRef","settings","initBreak","alarmVol","volume","autoStart","didStart","setDidStart","onBreak","curTime","setCurTime","clock","setClock","modalOpen","setModalOpen","time","current","Math","floor","toString","sec","padStart","reset","doPause","console","log","refreshInterval","setInterval","audio","Audio","BEEP","BELL","playCnt","a","Promise","r","setTimeout","this","currentTime","play","beep","clearInterval","onClick","key","cachedTimeObj","JSON","parse","localStorage","getItem","Object","assign","shortTT","shortBT","longTT","longBT","update_initTime","initTimeObj","window","setItem","stringify","applyTimeSettings","GeneralSettingsModal","vol","setVol","setAutoStart","alert","settingsObj","parseFloat","checked","WritableClock","minWriteFlag","setMinWriteFlag","secWriteFlag","setSecWriteFlag","setMin","setSec","tmp","setTmp","startWriting","applyChange","num","isNaN","String","length","elem","getElementById","focus","onBlur","onDoubleClick","App","toggleSecond","setToggleSecond","setInitTimeObj","generalCache","setSettingsObj","timeCache","genSettingsObj","setKey","clear","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.1a0f3c3a.chunk.js","sourcesContent":["import React, {useState, useEffect, useRef} from 'react';\r\nimport '../styles/SettingsModal.css';\r\nimport Modal from 'react-modal';\r\n\r\nModal.setAppElement('#root');\r\n\r\nexport default function TimeSettingsModal(props) {\r\n    const [timerMin, setTimerMin] = useState(25);\r\n    const [breakMin, setBreakMin] = useState(5);\r\n\r\n    // set keyboard keydown\r\n    useEffect(() => {\r\n        document.addEventListener('keydown', keydownEvents);\r\n        return ()=>document.removeEventListener('keydown', keydownEvents);\r\n    }, [props.isOpen]);\r\n    \r\n    const keydownEvents = (evt)=>{\r\n        if(props.isOpen && (evt.code === 'Space' || evt.code === 'Enter')) // only when the modal is opened\r\n            saveSettings();\r\n    };\r\n\r\n\r\n    function saveSettings(evt){\r\n        if(evt) evt.preventDefault();\r\n\r\n        const timeObj = {\r\n            timerTime: Number.parseInt(timerMin),\r\n            breakTime: Number.parseInt(breakMin)\r\n        }\r\n        props.save(timeObj);\r\n        props.close();\r\n    }\r\n\r\n    return (\r\n        <Modal \r\n            className=\"modal\" \r\n            id=\"time\"\r\n            closeTimeoutMS={200}\r\n            isOpen={props.isOpen} \r\n            onRequestClose={props.close}>\r\n            <div className=\"modal\" id=\"time\" >\r\n                <div className=\"modal-body\">  \r\n                    <form onSubmit={saveSettings}>\r\n                        <div className=\"settings\">\r\n                            <div className=\"settings-container-time\">\r\n                                <label>\r\n                                    Timer &nbsp;\r\n                                    <input id=\"time\" type=\"number\" step=\"5\" min=\"0\" max=\"99\" \r\n                                            value={timerMin} \r\n                                            onChange={(evt)=>{setTimerMin(evt.target.value);}}/>\r\n                                </label>\r\n\r\n                                <label>\r\n                                    Break &nbsp;\r\n                                    <input id=\"time\" type=\"number\" step=\"5\" min=\"0\" max=\"99\" \r\n                                            value={breakMin} \r\n                                            onChange={(evt)=>{setBreakMin(evt.target.value);}}/>\r\n                                </label>\r\n                            </div>\r\n                        </div>\r\n                        <br/><br/>\r\n                        <input className=\"settings-save\" type=\"submit\" value=\"Submit\" />\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </Modal>\r\n    )\r\n}","export default __webpack_public_path__ + \"static/media/beep.3078eb82.mp3\";","export default __webpack_public_path__ + \"static/media/bell.b1616f76.mp3\";","import React, {useState, useEffect, useRef} from 'react';\r\nimport '../styles/Timer.css';\r\n\r\nimport TimeSettingsModal from './TimeSettingsModal.js';\r\n\r\nimport BEEP from '../sound/beep.mp3'\r\nimport BELL from '../sound/bell.mp3'\r\n\r\nconst MINIUTE = 60;\r\n\r\nfunction Timer(props) {\r\n    let initTime = useRef(props.settings.timerTime); // 초기값 props.settingsObj.timerTime\r\n    let initBreak = useRef(props.settings.breakTime); // 초기값 props.settingsObj.breakTime\r\n    let alarmVol = useRef(props.settings.volume); // 초기값 props.settingsObj.volume\r\n    let autoStart = useRef(props.settings.autoStart); // 초기값 props.settingsObj.autoStart\r\n\r\n    const [didStart, setDidStart] = useState(false);\r\n    let onBreak = useRef(false);\r\n\r\n    const [curTime, setCurTime] = useState(-1); // -1 for starting a new timer / else resume paused timer\r\n    const [clock, setClock] = useState(\"00:00\");\r\n    \r\n    const [modalOpen, setModalOpen] = useState(false);\r\n\r\n\r\n    //======================================================\r\n    // Update clock\r\n    useEffect(() => {\r\n        let time = curTime;\r\n        if (time === -1) time = onBreak.current ? initBreak.current : initTime.current;\r\n\r\n        let min = Math.floor(time/MINIUTE); min = min.toString();\r\n        let sec = time%MINIUTE; sec = sec.toString();\r\n        setClock(min.padStart(2, '0') + \":\" + sec.padStart(2, '0'));\r\n    }, [curTime]);\r\n\r\n\r\n    // init clock & set keyboard keydown\r\n    useEffect(() => {\r\n        //console.log(\"Timer Init) props : \", props.genSettings)\r\n        setCurTime(initTime.current);\r\n\r\n        document.addEventListener('keydown', keydownEvents);\r\n        return ()=>document.removeEventListener('keydown', keydownEvents);\r\n    }, []);\r\n\r\n    const keydownEvents = (evt)=>{\r\n        if(evt.code === 'Space')\r\n            setDidStart(didStart => !didStart);\r\n        else if (evt.code === 'KeyR')\r\n            reset();\r\n    };\r\n\r\n\r\n    // countDown\r\n    useEffect(() => {\r\n        if(didStart){\r\n            if(curTime == -1) setCurTime(onBreak.current ? initBreak.current : initTime.current); // starting a new timer\r\n\r\n            const refreshInterval = setInterval(() => {\r\n                if(curTime == 0) {\r\n                    beep();\r\n                    onBreak.current = !onBreak.current; // toggle break status\r\n                    reset();\r\n                    if (onBreak.current) setDidStart(true); // start break\r\n                    else if (autoStart.current) setDidStart(true); // option : autostart (Inf Loop? Stack?)\r\n                    return;\r\n                }\r\n                setCurTime(curTime => curTime-1);        \r\n            }, 1000);\r\n            return () => clearInterval(refreshInterval);\r\n        }\r\n    }, [didStart, curTime]);\r\n\r\n\r\n    function reset(doPause = false){\r\n        console.log(doPause ? \"Pausing\" : \"Resetting\");\r\n        setDidStart(false);\r\n    \r\n        // resetting, not pause\r\n        if(!doPause) {\r\n            //onBreak.current = false;\r\n            setCurTime(-1);\r\n        }\r\n    }\r\n\r\n\r\n    function beep() {\r\n        // console.log(props.bell);\r\n        let audio = new Audio(props.type === 'SHORT' ? BEEP : BELL);   \r\n\r\n        audio.volume = alarmVol.current; // option\r\n\r\n        let playCnt = 1;\r\n        audio.addEventListener('ended', async function() {\r\n            playCnt++;\r\n            if(playCnt >= 1) return;\r\n            \r\n            await new Promise(r => setTimeout(r, 300)); // sleep\r\n            \r\n            this.currentTime = 0;\r\n            this.play();\r\n        }, false);\r\n        audio.play(); \r\n    }\r\n\r\n\r\n    // apply new settings from 'SettingsModal'\r\n    function applyTimeSettings(timeObj){\r\n        initTime.current = timeObj.timerTime;\r\n        initBreak.current = timeObj.breakTime;\r\n        reset();\r\n        setCurTime(initTime.current);\r\n        \r\n        // Update initTime and cache\r\n        const key = 'initTimeSettings-json';\r\n        let cachedTimeObj = JSON.parse(localStorage.getItem(key));\r\n        if(props.type === \"SHORT\"){\r\n            cachedTimeObj = Object.assign({}, cachedTimeObj, {\r\n                shortTT : timeObj.timerTime,\r\n                shortBT : timeObj.breakTime\r\n            });\r\n        }\r\n        else{\r\n            cachedTimeObj = Object.assign({}, cachedTimeObj, {\r\n                longTT : timeObj.timerTime,\r\n                longBT : timeObj.breakTime\r\n            });\r\n        }\r\n        props.update_initTime(initTimeObj => Object.assign({}, initTimeObj, cachedTimeObj)); // also update 'initTimeObj' state in App.js\r\n        window.localStorage.setItem(key, JSON.stringify(cachedTimeObj)); // cache time settings\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className = \"timerBox\" data-short>\r\n                <span id = \"breakNotify\">{onBreak.current ? \"(on Break)\" : \" \"}</span>\r\n                <p id = \"timer\">{clock}</p>\r\n                <div className = \"buttonSet\">\r\n                    <button className = \"button\" id=\"start\" onClick = {()=>setDidStart(true)}> Start </button>\r\n                    <button className = \"button\" id=\"pause\" onClick = {()=>reset(true)}> Pause </button>\r\n                    <button className = \"button secondary\" id=\"reset\" onClick = {()=>reset()}> Reset </button>\r\n                    <button className = \"button secondary\" id=\"timeSettings\" data-modal-target = \"SHORT\" onClick = {()=>setModalOpen(true)}> Time </button>\r\n                </div>\r\n            </div>\r\n\r\n            <TimeSettingsModal \r\n                isOpen={modalOpen} \r\n                close={()=>setModalOpen(false)} \r\n                save={(timeObj)=>applyTimeSettings(timeObj)}>\r\n            </TimeSettingsModal>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Timer;","import React, {useState, useEffect, useRef} from 'react';\r\nimport '../styles/SettingsModal.css';\r\nimport Modal from 'react-modal';\r\n\r\nModal.setAppElement('#root');\r\n\r\nexport default function GeneralSettingsModal(props) {\r\n    const [vol, setVol] = useState(1);\r\n    const [autoStart, setAutoStart] = useState(false);\r\n\r\n    // set keyboard keydown\r\n    useEffect(() => {\r\n        document.addEventListener('keydown', keydownEvents);\r\n        return ()=>document.removeEventListener('keydown', keydownEvents);\r\n    }, [props.isOpen]);\r\n    \r\n    const keydownEvents = (evt)=>{\r\n        if(props.isOpen && (evt.code === 'Space' || evt.code === 'Enter')) // only when the modal is opened\r\n            saveSettings();\r\n    };\r\n    \r\n\r\n\r\n    function saveSettings(evt=null){\r\n        if(evt) evt.preventDefault();\r\n\r\n        alert(\"Settings saved\");\r\n        const settingsObj = {\r\n            volume: Number.parseFloat(vol),\r\n            autoStart: autoStart,\r\n        }\r\n        props.save(settingsObj);\r\n        props.close();\r\n    }\r\n\r\n    return (\r\n        <Modal \r\n            className=\"modal\" \r\n            id=\"general\"\r\n            closeTimeoutMS={200}\r\n            isOpen={props.isOpen} \r\n            onRequestClose={props.close}>\r\n            <div className=\"modal\" id=\"general\" >\r\n                <div className=\"modal-header\">\r\n                    <span className=\"title\">General Settings</span>\r\n                    <button className=\"close-button\" onClick={props.close}> &times; </button>\r\n                </div>\r\n\r\n                <div className=\"modal-body\">  \r\n                    <form onSubmit={saveSettings}>\r\n                        <div className=\"settings\">\r\n                            <div className=\"settings-container-checkbox\">\r\n                                <label>\r\n                                    <input type=\"checkbox\" \r\n                                        checked={autoStart} \r\n                                        onChange={()=>{setAutoStart(autoStart=>!autoStart);}}>\r\n                                    </input> Auto start timers and breaks?\r\n                                </label>\r\n                            </div>\r\n                            \r\n                            <br/>\r\n\r\n                            <div className=\"settings-container-slider\">\r\n                                Select alarm volume\r\n                                <input className=\"slider\" id=\"volume\" type=\"range\" min=\"0\" max=\"1\" step=\"0.01\" \r\n                                onChange={(evt)=>{setVol(evt.target.value);}}></input>\r\n                            </div>\r\n                        </div>\r\n                        <input className=\"settings-save\" type=\"submit\" value=\"Submit\" />\r\n                        <input className=\"settings-save\" type=\"reset\" value=\"Reset\" />\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </Modal>\r\n    )\r\n}","import React, {useState, useEffect} from 'react';\r\n\r\nexport default function WritableClock() {\r\n    const [minWriteFlag, setMinWriteFlag] = useState(false);\r\n    const [secWriteFlag, setSecWriteFlag] = useState(false);\r\n    const [min, setMin] = useState(\"00\");\r\n    const [sec, setSec] = useState(\"00\");\r\n    const [tmp, setTmp] = useState(\"\");\r\n\r\n    const MIN = 0, SEC = 1;\r\n\r\n    function startWriting(target){\r\n        setTmp(target === MIN ? min : sec); \r\n        target === MIN ? setMinWriteFlag(true) : setSecWriteFlag(true);\r\n    }\r\n\r\n    // Focus\r\n    useEffect(()=>{\r\n        let elem = document.getElementById(\"minWrite\")\r\n        if(elem) elem.focus();\r\n    }, [minWriteFlag]);\r\n    useEffect(()=>{\r\n        let elem = document.getElementById(\"secWrite\")\r\n        if(elem) elem.focus();\r\n    }, [secWriteFlag]);\r\n\r\n    \r\n    function applyChange(target){\r\n        const type = (target===MIN ? \"Minute\" : \"Second\");\r\n        let num = parseInt(tmp);\r\n        if(!isNaN(num) && (0 <= num && num < (target === MIN ? 100 : 60))){\r\n            console.log(`Changing ${type} from ${min} to ${num}`); // DEBUG\r\n\r\n            num = String(num);\r\n            if(num.length === 1) num = \"0\" + num;\r\n\r\n            if(target === MIN){\r\n                setMin(num);\r\n            }\r\n            else{\r\n                setSec(num);\r\n            }\r\n        } \r\n        else{\r\n            alert(`${type} must be a number between 0 to ${target===MIN ? 99 : 59}`);\r\n        }\r\n\r\n        target === MIN ? setMinWriteFlag(false) : setSecWriteFlag(false);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                minWriteFlag\r\n                ? <input className=\"write\" id=\"minWrite\" type=\"text\" value={tmp} onChange={(evt)=>{setTmp(evt.target.value)}} onBlur={()=>{applyChange(MIN)}}/>\r\n                : <span className=\"show\" onDoubleClick = {()=>{startWriting(MIN)}}>{min}</span>\r\n            } \r\n            :\r\n            {\r\n                secWriteFlag\r\n                ? <input className=\"write\" id=\"secWrite\" type=\"text\" value={tmp} onChange={(evt)=>{setTmp(evt.target.value)}} onBlur={()=>{applyChange(SEC)}}/>\r\n                : <span className=\"show\" onDoubleClick = {()=>{startWriting(SEC)}}>{sec}</span>\r\n            } \r\n        </div>\r\n    )\r\n}\r\n","import React, {useState, useEffect, useRef} from 'react';\r\nimport '../styles/App.css';\r\nimport Timer from './Timer';\r\nimport GeneralSettingsModal from './GeneralSettingsModal.js';\r\n\r\nimport WritableClock from './WritableClock';\r\n\r\nfunction App(props) {\r\n  const [toggleSecond, setToggleSecond] = useState(false);\r\n  const [modalOpen, setModalOpen] = useState(false);\r\n\r\n  const INIT_TIME = {\r\n    shortTT : 3,\r\n    shortBT: 2,\r\n    longTT : 5,\r\n    longBT: 3,\r\n  }; // TT : Timer Time, BT : Break Time\r\n  const [initTimeObj, setInitTimeObj] = useState(INIT_TIME); // stores initial time settings for both timers\r\n\r\n\r\n  // =============================================================================\r\n  // [Cache] Retrieve saved settings from localStorage\r\n  useEffect(()=>{\r\n    //localStorage.clear();\r\n    let generalCache = localStorage.getItem('generalSettings-json')\r\n    if (generalCache){\r\n      setSettingsObj(JSON.parse(generalCache));\r\n    }\r\n\r\n    let timeCache = localStorage.getItem('initTimeSettings-json')\r\n    if (timeCache){\r\n      setInitTimeObj(initTimeObj => Object.assign({}, initTimeObj, JSON.parse(timeCache)));\r\n    }\r\n  }, []);\r\n\r\n\r\n  // =============================================================================\r\n  // General settings - for both timers : volume, autostart, ...\r\n  const [genSettingsObj, setSettingsObj] = useState({\r\n    volume: 1,\r\n    autoStart: false\r\n  });\r\n  const [key, setKey] = useState(0);\r\n\r\n  useEffect(()=>{\r\n    setKey(key=>key+1); // re-render Timer components by changing the key\r\n    localStorage.setItem('generalSettings-json', JSON.stringify(genSettingsObj)); // cache general settings\r\n  }, [genSettingsObj]);\r\n\r\n  function applySettings(settingsObj){\r\n    //console.log(\"--Applying general settings - expecting re-rendering--\")\r\n    setSettingsObj(settingsObj)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"header\">\r\n        <span className=\"title\">Pomodoro Timer Plus+</span>\r\n        <div className=\"main-buttonSet\">\r\n          <button onClick = {()=>setToggleSecond(!toggleSecond)}>Long-Timer</button>\r\n          <button onClick = {()=>setModalOpen(true)}>Settings</button>\r\n          <button onClick = {()=>{localStorage.clear(); alert(\"cleared!\")}}>Reset Cache</button>\r\n        </div>\r\n      </div>\r\n      <div className = \"wrapper\">\r\n        <Timer \r\n          key = {key}\r\n          type = \"SHORT\" \r\n          settings = {Object.assign({}, genSettingsObj, \r\n                                        {timerTime:initTimeObj.shortTT, breakTime:initTimeObj.shortBT})}\r\n          update_initTime = {setInitTimeObj}\r\n        >\r\n        </Timer>\r\n        {toggleSecond ?\r\n          <Timer \r\n            key = {key + 2} // if set to key + 1, React confuses short timer with long timer whenever key is incremented\r\n            type = \"LONG\" \r\n            settings = {Object.assign({}, genSettingsObj, \r\n                                          {timerTime:initTimeObj.longTT, breakTime:initTimeObj.longBT})}\r\n            update_initTime = {setInitTimeObj}\r\n          >\r\n          </Timer>\r\n          : null\r\n        }\r\n      </div>\r\n      \r\n      <WritableClock></WritableClock>\r\n\r\n      <GeneralSettingsModal\r\n        isOpen={modalOpen} \r\n        close={()=>setModalOpen(false)} \r\n        save={(num)=>applySettings(num)}\r\n      >\r\n      </GeneralSettingsModal>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}